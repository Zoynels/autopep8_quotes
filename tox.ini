[tox]
envlist =
    coverage_erase
    checkonly
    py{38}
    coverage_build

[gh-actions]
python =
    3.8: coverage_erase, checkonly, py38, coverage_build

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows

[testenv]
passenv = CODECOV_*
depends =
    py{37,38}: coverage_erase, checkonly
    coverage_build: py{37,38}
install_command=python -m pip install {packages}
deps = 
    -r {toxinidir}/requirements.txt
    pytest
    pytest-cov
    pyannotate
commands =
    python -m pytest -vv --capture=tee-sys --cov-report=term-missing:skip-covered --cov-append --cov=autopep8_quotes --log-cli-level=10000

[pytest]
basepython =
    py38: python3.8
python_files =
    *_test.py
norecursedirs = .git _build tmp* .eggs
timeout = 480
markers =
    asyncio: mark a atest as an asyncio test.
    basic: mark a test as a basic feature test.
    files: mark a test as a test with actual files.
    api: mark a test as an interface test.
    unit: mark a test as an unit test.
    cli: mark a test as a cli test.
    benchmark: mark a test as a benchmarking.

[testenv:coverage_erase]
ignore_errors=true
skip_install = true
deps = 
    coverage[toml]==5.1
commands =
    coverage erase

[testenv:coverage_build]
ignore_errors=true
skip_install = true
deps = 
    coverage[toml]==5.1
commands =
    coverage report --ignore-errors
    coverage html -d build/htmlcov

[testenv:coverage_coveralls]
ignore_errors=true
skip_install = true
deps =
    coveralls
commands =
    coveralls []

[mypy]
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
show_column_numbers = true

[isort]
known_first_party = autopep8_quotes
known_third_party = docutils,flake8,pyannotate_runtime,pytest,pytz,setuptools,sphinx,yaml,untokenize,tokenize,ast,zs_pluginmanager
line_length = 160
indent='    '
multi_line_output = 3
force_single_line = true

[flake8]
ignore = F841
max-line-length = 160
inline-quotes = "
multiline-quotes = """
docstring-quotes = """

[autopep8_quotes]
normalize-string-quotes = true
lowercase-string-prefix = true
remove-string-u-prefix = true
inline-quotes = "
multiline-quotes = """
docstring-quotes = """
print-files = true

[check-manifest]
ignore =
    tests/**
    *.bat
    *.txt
    *.yaml
    *.yml
    Makefile

[testenv:checkonly]
ignore_errors=true
skip_install = false
install_command=python -m pip install {packages}
deps =
    -r {toxinidir}/requirements.txt
    colorama

    mypy>=0.770
    mypy_extensions>=0.4.3
    pycryptodome>=3.9.7
    flake8-quotes
    flake8
    isort
    twine
    check-manifest

commands =
    # Check manifest
    mypy --strict autopep8_quotes
    mypy --strict tests

    # Check package
    isort --check-only --recursive autopep8_quotes
    autopep8_quotes --check-soft --recursive --files=autopep8_quotes
    flake8 --filename=*.py autopep8_quotes {posargs}

    # Check tests
    isort --check-only --recursive tests
    autopep8_quotes --check-soft --recursive --files=tests
    # do not enable flake8! because files will be checked in tests!
    # flake8 --filename=*.py setup.py {posargs}

    # Check setup.py
    isort --check-only --recursive tests
    autopep8_quotes --check-soft --recursive --files=setup.py
    flake8 --filename=*.py setup.py {posargs}

    # Check twine
    python setup.py sdist
    twine check dist/*

    # Check manifest
    check-manifest --verbose

[testenv:local__autopep8_isort]
ignore_errors=true
skip_install = false
install_command=python -m pip install {packages}
deps =
    -r {toxinidir}/requirements.txt
    colorama

    flake8-quotes
    flake8
    autopep8
    isort
commands =
    # Change package
    isort --diff --recursive autopep8_quotes
    isort --atomic --recursive autopep8_quotes
    isort --recursive autopep8_quotes
    autopep8_quotes --in-place --diff --recursive --files=autopep8_quotes
    autopep8 --aggressive --aggressive --aggressive --recursive --in-place autopep8_quotes
    flake8 --filename=*.py autopep8_quotes {posargs}

    # Change tests
    isort --diff --recursive tests
    isort --atomic --recursive tests
    isort --recursive tests
    autopep8_quotes --in-place --diff --recursive --files=tests
    autopep8 --aggressive --aggressive --aggressive --recursive --in-place tests
    # temp no check!    flake8 --filename=*.py tests {posargs}

    # Change setup.py
    isort --diff --recursive tests
    isort --atomic --recursive tests
    isort --recursive tests
    autopep8_quotes --in-place --diff --recursive --files=setup.py
    autopep8 --aggressive --aggressive --aggressive --recursive --in-place setup.py
    flake8 --filename=*.py setup.py {posargs}

[testenv:local__pytest]
ignore_errors=true
skip_install = false
install_command=python -m pip install {packages}
deps = 
    -r {toxinidir}/requirements.txt
    pytest
    pytest-cov
commands =
    python -m pytest -vv --capture=tee-sys --cov-report=term-missing:skip-covered --cov-append --cov=autopep8_quotes --log-cli-level=10000

[testenv:local__mypy]
ignore_errors=true
skip_install = false
install_command=python -m pip install {packages}
deps =
    -r {toxinidir}/requirements.txt
    mypy>=0.770
    mypy_extensions>=0.4.3
    pycryptodome>=3.9.7
commands =
    mypy --strict autopep8_quotes
    mypy --strict tests

[testenv:local__twine]
ignore_errors=false
skip_install=true
deps =
    twine
commands =
    python setup.py sdist
    twine check dist/*

[testenv:local__check_manifest]
ignore_errors=false
skip_install=true
deps =
    check-manifest
commands =
    check-manifest --verbose
